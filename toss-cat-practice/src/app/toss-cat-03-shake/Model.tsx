/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.18 scene.gltf --transform --types 
Files: scene.gltf [145.87KB] > /Users/crow/Desktop/crow/crow-test/toss-cat-practice/public/cat/scene-transformed.glb [591.32KB] (-305%)
Author: cacaoin3d (https://sketchfab.com/cacaoin3d)
License: SKETCHFAB Standard (https://sketchfab.com/licenses)
Source: https://sketchfab.com/3d-models/little-cat-1e6f360989b04b53a393f398d5372205
Title: Little Cat
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useSpring, animated } from '@react-spring/three'

type GLTFResult = GLTF & {
  nodes: {
    Object_27: THREE.SkinnedMesh
    Object_29: THREE.SkinnedMesh
    Object_33: THREE.SkinnedMesh
    Object_31: THREE.SkinnedMesh
    Object_35: THREE.SkinnedMesh
    _rootJoint: THREE.Bone
  }
  materials: {
    Body: THREE.MeshStandardMaterial
    Eyes: THREE.MeshStandardMaterial
    Ears_Cat: THREE.MeshStandardMaterial
    Eyebrows: THREE.MeshStandardMaterial
    EyelidsTail_Cat: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

type ActionName = '01_TPose_LittleFriends' | '02_Idle_LittleFriends' | '03_Walk_LittleFriends' | '04_Run_LittleFriends' | '05_Jump_LittleFriends' | '06_Greeting_LittleFriends' | '07_Eat_LittleFriends' | '08_Sleep01_LittleFriends' | '09_Sleep02_LittleFriends' | '10_Sleep03_LittleFriends'
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}


export function Model(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>(null)
  const { nodes, materials } = useGLTF('cat/scene-transformed.glb') as GLTFResult
  const [active, setActive] = React.useState(false)

  const springs = useSpring({ 
    from: { rotation: 0, scale: 5 },
    to: async (next) => {
      if (!active) return;
      await next({ rotation: Math.PI / 20, scale: 4.5});
      await next({ rotation: -Math.PI / 30, scale: 4.8});
      await next({ rotation: Math.PI / 50, scale: 4.9});
      await next({ rotation: 0, scale: 5});
      setActive(false);
    },
    config: {
      duration: 150,
    },
    reset: true,
  });


  return (
    <animated.group ref={group} {...props} dispose={null} onClick={() => setActive(true)} scale={springs.scale} rotation-y={springs.rotation}>
      <group name="Sketchfab_Scene">
        <primitive object={nodes._rootJoint}/>
        <skinnedMesh name="Object_27" geometry={nodes.Object_27.geometry} material={materials.Body} skeleton={nodes.Object_27.skeleton} scale={0.625} />
        <skinnedMesh name="Object_29" geometry={nodes.Object_29.geometry} material={materials.Eyes} skeleton={nodes.Object_29.skeleton} scale={0.625} />
        <skinnedMesh name="Object_33" geometry={nodes.Object_33.geometry} material={materials.Ears_Cat} skeleton={nodes.Object_33.skeleton} scale={0.625} />
        <skinnedMesh name="Object_31" geometry={nodes.Object_31.geometry} material={materials.Eyebrows} skeleton={nodes.Object_31.skeleton} morphTargetDictionary={nodes.Object_31.morphTargetDictionary} morphTargetInfluences={nodes.Object_31.morphTargetInfluences} scale={0.625} />
        <skinnedMesh name="Object_35" geometry={nodes.Object_35.geometry} material={materials.EyelidsTail_Cat} skeleton={nodes.Object_35.skeleton} morphTargetDictionary={nodes.Object_35.morphTargetDictionary} morphTargetInfluences={nodes.Object_35.morphTargetInfluences} scale={0.625} />
      </group>
    </animated.group>
  )
}

useGLTF.preload('/scene-transformed.glb')
